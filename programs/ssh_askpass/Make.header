# To use this file, first run "makemake" and then run "make".
# (makemake is part of the JX distribution)

# Useful directories

JX_ROOT := ../..

CODEDIR  := ./code
JCOREDIR := ${JX_ROOT}/include/jcore
JXDIR    := ${JX_ROOT}/include/jx

JLIBDIR     := ${JX_ROOT}/lib
JCORELIBDIR := ${JX_ROOT}/libjcore
JXLIBDIR    := ${JX_ROOT}/libjx
ACELIBDIR   := ${JX_ROOT}/ACE

# Directories to search for header files

SEARCHDIRS := -I${CODEDIR} \
              -I${JCOREDIR} \
              -I${JXDIR}

# other constants

PROG_NAME         := nps-ssh-askpass
PROG_VERSION      := 1.0.0
SIGNATURE         := nps-ssh-askpass
PROG_STRING_FILES := strings/*

# makemake variables

J_STRING_FILES := ${PROG_STRING_FILES}

include ${JX_ROOT}/include/make/jx_constants
include ${JX_ROOT}/include/make/jx_config

DEPENDFLAGS := ${J_COMPILER_DEPEND_FLAGS} \
                \
               ${J_COMPILE_DEBUG} ${SEARCHDIRS}

TOUCHPATHS := ${JCORELIBDIR} ${JXLIBDIR}

# library dependencies

ifdef J_BUILD_SHARED_LIB
  LIB_DEPS := ${JLIBDIR}/libjcore-${JX_LIB_VERSION}.so \
              ${JLIBDIR}/libjx-${JX_LIB_VERSION}.so
else
  LIB_DEPS := ${JLIBDIR}/libjcore-${JX_LIB_VERSION}.a \
              ${JLIBDIR}/libjx-${JX_LIB_VERSION}.a
endif

# make variables

LOADLIBES := ${J_STD_LIBS}
LDFLAGS   := 

#####

.PHONY : default
default: libs ${PROG_NAME}

.PHONY : Makefiles
Makefiles:

#
# string data
#

.PHONY : strings
strings:
	compile_jstrings ${J_STRING_FILES} \
      --code kASKDefaultStringData ${CODEDIR}/askStringData.h

.PHONY : stringdb
stringdb:
	compile_jstrings ${J_STRING_FILES} --db ${PROG_NAME}_us

${PROG_NAME}:: strings

#
# required libraries
#

.PHONY : libs
libs:
	@for path in ${TOUCHPATHS}; do ( if cd $$path; then ${MAKE}; fi ) done

#
# install binaries
#

.PHONY : jxinstall
jxinstall: ${PROG_NAME}
	@strip ${call EXE, ${PROG_NAME}}
  ifneq (${J_WANT_INSTALL},0)
	@mv ${PROG_NAME} ${JX_INSTALL_ROOT}/
  endif

.PHONY : jxuninstall
jxuninstall:
	@${RM} ${JX_INSTALL_ROOT}/${PROG_NAME}

#
# source distribution (only useful if project is in ${JX_ROOT}/programs)
#

SRC_FILE_DIR := ${JX}/programs/ssh_askpass

.PHONY : jxsource
jxsource:
	@cd ${J_DISTR_TAR_DIR}; \
     tar -rf ${DISTR_TAR_FILE} ${filter-out %.o %~, \
                               ${shell cd ${J_DISTR_TAR_DIR}; echo \
              ${addprefix ${SRC_FILE_DIR}/, \
                README Make.* *.jcc *.fd \
                code/* strings/* } }}

#
# binary distributions
#

ASKPASS := ${PROG_NAME}-${PROG_VERSION}

ASKPASS_TAR_DIR := ${shell pwd}

ASKPASS_SHARED_TAR_NAME := nps_ssh_askpass_${PROG_VERSION}.tar

.PHONY : release_shared
release_shared: libs
	@${RM} ${PROG_NAME}; ${MAKE} ${PROG_NAME}; strip ${call EXE, ${PROG_NAME}}
	@${MAKE} ASKPASS_DISTR_TAR_FILE=${ASKPASS_SHARED_TAR_NAME} distr_sub

.PHONY : release_static
release_static: debug
	@strip ${call EXE, ${PROG_NAME}}
	@${MAKE} ASKPASS_DISTR_TAR_FILE=${ASKPASS_SHARED_TAR_NAME} distr_sub

# distr_sub (ASKPASS_DISTR_TAR_FILE)

.PHONY : distr_sub
distr_sub:
	@${RM} -r ${ASKPASS}
	@mkdir ${ASKPASS} ${ASKPASS}/lib
	@ln -s ../README                   ${ASKPASS}/README
	@ln -s ../${call EXE,${PROG_NAME}} ${ASKPASS}/${call EXE,${PROG_NAME}}
ifdef J_RPM_GZ_LIBS
	@${foreach LIB, ${J_RPM_GZ_LIBS}, \
         cp ${LIB} ${ASKPASS}/lib/; gzip ${ASKPASS}/lib/${notdir ${LIB}} }
endif
	@${TAR} -chf ${ASKPASS_DISTR_TAR_FILE} ${ASKPASS}
	@${RM} -r ${ASKPASS}
	@mv ${ASKPASS_DISTR_TAR_FILE} ${J_DISTR_TAR_DIR}/

#
# RPM
#

RPM_TAR_FILE  := ${RPM_SRC_DIR}/nps_ssh_askpass_${PROG_VERSION}.tar
RPM_SPEC_FILE := ${shell pwd}/rpm/${PROG_NAME}-${PROG_VERSION}-1.spec

.PHONY : release_rpm
release_rpm: clean_rpm
	@${MAKE} RPM_SOURCE_TAR_NAME=${ASKPASS_SHARED_TAR_NAME} build_rpm
	@${MAKE} clean_rpm

# build_rpm (RPM_SOURCE_TAR_NAME)

.PHONY : build_rpm
build_rpm:
	@cp ${J_DISTR_TAR_DIR}/${RPM_SOURCE_TAR_NAME} ${RPM_TAR_FILE}
	@${RPM} ${RPM_SPEC_FILE}
	@mv ${RPM_BIN_DIR}/*.rpm ${J_DISTR_TAR_DIR}/
	@chown ${USER}. ${J_DISTR_TAR_DIR}/*.rpm
	@gzip ${J_DISTR_TAR_DIR}/${RPM_SOURCE_TAR_NAME}

.PHONY : clean_rpm
clean_rpm:
	@${RM}    /usr/X11R6/bin/${PROG_NAME}
	@${RM} -r ${RPM_LIB_PATH}
	@${RM} -r /usr/share/doc/${PROG_NAME}-*

#
# debugging version
#

DEBUG_LOADLIBES := -L${JLIBDIR} \
                   ${J_BEGIN_LINK_STATIC} \
                   ${ljx} ${ljcore} ${J_ACE_LIBS} \
                   ${J_END_LINK_STATIC} \
                   ${J_X11_LIBS} ${J_GCC_LIBS}

.PHONY : debug
debug: libs
  ifdef J_BUILD_SHARED_LIB
	@cd ${ACELIBDIR}; ${MAKE} static
  endif
	@${RM} ${PROG_NAME}
	@${MAKE} "LOADLIBES=${DEBUG_LOADLIBES}" ${PROG_NAME}

#
# static binary
#

.PHONY : static
static: debug
	@${J_STRIP_DEBUG} ${call EXE, ${PROG_NAME}}

# DO NOT DELETE THIS LINE -- Code Crusader depends on it.

# This portion of the file was automatically generated by Code Crusader.
# Do not edit it directly!
# Any changes you make will be silently overwritten.

# build libraries before main result

# DO NOT DELETE THIS LINE -- Code Crusader depends on it.
